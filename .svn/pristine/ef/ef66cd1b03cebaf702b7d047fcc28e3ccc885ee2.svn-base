package com.akito.tools.file;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.List;


/**
 * @author THINK
 *将源文件全路径名及静态文件名写入DBS目录里的ISA_KEEP.LST文件
 *ISA_KEEP.LST文件用来保存各个被分析的源文件名及其对用的数据库文件的名字
 *文档结构是：头部一个int型，指出有多少个struct eg_dbs_namerec结构。后面按顺序列出多个
 *eg_dbs_namerec结构体
 */
public class DbsDocStuct implements Serializable{

	private static final long serialVersionUID = 4132297205355811148L;

	/** 头部
	 */
	private int dbsNum;
	
	private File file;
	private List<Namerec> namerecList;
	
	
	public DbsDocStuct(File file) {
		this.file = file;
		namerecList = new ArrayList<>();
	}

	public void addNamerec(String srcName, String tmpName) {
		namerecList.add(new Namerec(srcName.toCharArray(), tmpName.toCharArray()));
	}

	protected class Namerec implements Serializable{
		
		private static final int srcSize = 256;
		private static final int tmpSize = 32;
		
		/**原文件名（带全路径）
		 */
		private char[] srcName;
		
		/**数据库文件名
		 */
		private char[] tmpName;

		public Namerec(char[] srcName, char[] tmpName) {
			this.srcName = srcName;
			this.tmpName = tmpName;
		}
		
		public void writeObject(FileChannel channel) {
			CharBuffer buffer = CharBuffer.allocate(srcSize);
			buffer.wrap(srcName);
			buffer.flip();
		}
		
	}
	
	/** 写入文件
	 * @throws IOException 
	 */
	public void writeObeject() throws IOException {
		dbsNum = namerecList.size();
		FileChannel channel = new FileInputStream(file).getChannel();
		ByteBuffer bf = java.nio.ByteBuffer.allocate(4);
		bf.putInt(dbsNum);
		for (Namerec namerec : namerecList) {
			namerec.writeObject(channel);
		}
	}
	
}
